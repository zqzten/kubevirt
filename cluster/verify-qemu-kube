#!/bin/bash
set -e

VM_NAME=$1
if [ "x$VM_NAME" == "x" ]; then
echo "Usage:"
echo "  ./verify-qemu-cube <vm_name>"
exit 1
fi
VM_EMULATION_PID=$(sudo grep -E 'domstatus.*pid' /var/run/libvirt/qemu/${VM_NAME}.xml | sed "s/.*pid='\([[:digit:]]\+\)'.*/\1/")
SUDO_PID=$(pgrep -P $VM_EMULATION_PID)
NSENTER_PID=$(pgrep -P $SUDO_PID)
VM_PID=$(pgrep -P $NSENTER_PID)
CONTAINER_ID=$( docker ps --no-trunc | awk "/.*compute.*virt-launcher-$VM_NAME.*/ { print \$1 }" )
CONTAINER_PID=$(docker inspect --format '{{.State.Pid}}' $CONTAINER_ID)
ERROR=0

echo "VM name: $VM_NAME"
echo "VM emulation PID: $VM_EMULATION_PID"
echo "VM PID: $VM_PID"
echo "Container ID: $CONTAINER_ID"
echo "Container PID: $CONTAINER_PID"

# Check cgroups
echo ""
echo "Checking for required cgroups:"
CGROUPS='freezer cpu cpuacct perf_event net_cls blkio memory hugetlb cpuset'
for CG in $CGROUPS; do

  if grep -Fxq "$VM_PID"  /sys/fs/cgroup/${CG}/system.slice/docker-$CONTAINER_ID.scope/tasks; then
    echo VM $VM_NAME found in container cgroup $CG
  else
    ERROR=1
    echo VM $VM_NAME NOT found in container cgroup $CG
  fi
done

echo ""
echo "Checking for excluded cgroups:"
EXCLUDED_CGROUPS="devices systemd"
for CG in $EXCLUDED_CGROUPS; do

  if grep -Fxq "$VM_PID"  /sys/fs/cgroup/${CG}/system.slice/docker-$CONTAINER_ID.scope/tasks; then
    echo VM $VM_NAME FOUND in container cgroup $CG
    ERROR=1
  else
    echo VM $VM_NAME not found in container cgroup $CG
  fi
done

# Check PID namespaces
echo ""
echo "Checking PID namespace:"
VM_PID_NS=$(ls -iL /proc/$VM_PID/ns/pid | cut -f 1 -d " ")
CONTAINER_PID_NS=$(ls -iL /proc/$CONTAINER_PID/ns/pid | cut -f 1 -d " ")

if [ "x$VM_PID_NS" == "x" ]; then
  echo Could not determine PID namespace of VM $VM_NAME 
  ERROR=1
fi

if [ "$VM_PID_NS" == "$CONTAINER_PID_NS" ]; then
  echo VM $VM_NAME found in PID namespace of container
else
  echo VM $VM_NAME NOT found in PID namespace of container
  ERROR=1
fi

echo ""
if [ "$ERROR" -gt "0" ]; then
  echo "Verification failed."
else
  echo "Verification successful."
fi

exit $ERROR
