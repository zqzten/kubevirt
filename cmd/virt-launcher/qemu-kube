#!/bin/sh

ARGS="$@"

# static config
if [ -r "/etc/vdsm/qemu_kube.conf" ]; then
    source "/etc/vdsm/qemu_kube.conf"
fi
# runtime config
# TODO: let Makefile fill this
# source "/var/run/vdsm/qemu_kube.conf"

if [ -z "$QEMU" ]; then
    QEMU="/usr/bin/qemu-system-x86_64"
fi
if [ -z "$LOG" ]; then
    LOG="/var/log/vdsm/qemu-kube.log"
fi
if [ ! -w "$LOG" ]; then
    LOG="/dev/null"
fi

# All namespaces a docker container uses:
#CGROUPS='freezer,cpu,cpuacct,perf_event,net_cls,blkio,devices,memory,hugetlb,cpuset'
CGROUPS='freezer,cpu,cpuacct,perf_event,net_cls,blkio,memory,hugetlb,cpuset' # don't use devices namespace

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -name)
        VM_NAME="$2"
        shift
    ;;
    *)
    ;;
esac
shift
done

if [ -z "$VM_NAME" ]; then
    exec $QEMU $ARGS
fi


CONTAINER_ID=$( docker ps --no-trunc | awk "/.*compute.*virt-launcher-$VM_NAME.*/ { print \$1 }" )
CONTAINER_PID=$(docker inspect --format '{{.State.Pid}}' $CONTAINER_ID)
CMD="$QEMU $ARGS"

date >> $LOG
echo "$CMD" >> $LOG

# Start qemu in the pid namespace of the container to receive signals on container kills
# Don't close file descriptors bigger than 10000 to allow passing tap device fds
exec sudo -C 10000 nsenter -t $CONTAINER_PID -p $CMD &
SUDO_PID=$!
NSENTER_PID=$(sudo pgrep -P $SUDO_PID)
QEMU_PID=$(sudo pgrep -P $NSENTER_PID)

sleep 2
# Move the qemu process to the cgroups of the docker container
# to adher the resource limitations of the container.
# TODO, move a subshell into the right cgroups and execute nsenter there, to
# start qemu in the right groups from the beginning
sudo cgclassify -g ${CGROUPS}:system.slice/docker-$CONTAINER_ID.scope --sticky $QEMU_PID
wait
