// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/handler-launcher-com/cmd/info/info.proto

/*
Package info is a generated protocol buffer package.

It is generated from these files:
	pkg/handler-launcher-com/cmd/info/info.proto

It has these top-level messages:
	CmdInfoRequest
	CmdInfoResponse
*/
package info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdInfoRequest struct {
}

func (m *CmdInfoRequest) Reset()                    { *m = CmdInfoRequest{} }
func (m *CmdInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdInfoRequest) ProtoMessage()               {}
func (*CmdInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CmdInfoResponse struct {
	SupportedCmdVersions         []string `protobuf:"bytes,1,rep,name=supportedCmdVersions" json:"supportedCmdVersions,omitempty"`
	SupportedKubeVirtAPIVersions []string `protobuf:"bytes,2,rep,name=supportedKubeVirtAPIVersions" json:"supportedKubeVirtAPIVersions,omitempty"`
	SupportedDomainVersions      []string `protobuf:"bytes,3,rep,name=supportedDomainVersions" json:"supportedDomainVersions,omitempty"`
	SupportedDomainStatsVersions []string `protobuf:"bytes,4,rep,name=supportedDomainStatsVersions" json:"supportedDomainStatsVersions,omitempty"`
}

func (m *CmdInfoResponse) Reset()                    { *m = CmdInfoResponse{} }
func (m *CmdInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdInfoResponse) ProtoMessage()               {}
func (*CmdInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CmdInfoResponse) GetSupportedCmdVersions() []string {
	if m != nil {
		return m.SupportedCmdVersions
	}
	return nil
}

func (m *CmdInfoResponse) GetSupportedKubeVirtAPIVersions() []string {
	if m != nil {
		return m.SupportedKubeVirtAPIVersions
	}
	return nil
}

func (m *CmdInfoResponse) GetSupportedDomainVersions() []string {
	if m != nil {
		return m.SupportedDomainVersions
	}
	return nil
}

func (m *CmdInfoResponse) GetSupportedDomainStatsVersions() []string {
	if m != nil {
		return m.SupportedDomainStatsVersions
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdInfoRequest)(nil), "kubevirt.cmd.info.CmdInfoRequest")
	proto.RegisterType((*CmdInfoResponse)(nil), "kubevirt.cmd.info.CmdInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CmdInfo service

type CmdInfoClient interface {
	Info(ctx context.Context, in *CmdInfoRequest, opts ...grpc.CallOption) (*CmdInfoResponse, error)
}

type cmdInfoClient struct {
	cc *grpc.ClientConn
}

func NewCmdInfoClient(cc *grpc.ClientConn) CmdInfoClient {
	return &cmdInfoClient{cc}
}

func (c *cmdInfoClient) Info(ctx context.Context, in *CmdInfoRequest, opts ...grpc.CallOption) (*CmdInfoResponse, error) {
	out := new(CmdInfoResponse)
	err := grpc.Invoke(ctx, "/kubevirt.cmd.info.CmdInfo/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmdInfo service

type CmdInfoServer interface {
	Info(context.Context, *CmdInfoRequest) (*CmdInfoResponse, error)
}

func RegisterCmdInfoServer(s *grpc.Server, srv CmdInfoServer) {
	s.RegisterService(&_CmdInfo_serviceDesc, srv)
}

func _CmdInfo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdInfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.cmd.info.CmdInfo/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdInfoServer).Info(ctx, req.(*CmdInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmdInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubevirt.cmd.info.CmdInfo",
	HandlerType: (*CmdInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _CmdInfo_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/handler-launcher-com/cmd/info/info.proto",
}

func init() { proto.RegisterFile("pkg/handler-launcher-com/cmd/info/info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0xc8, 0x4e, 0xd7,
	0xcf, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0xcd, 0x49, 0x2c, 0xcd, 0x4b, 0xce, 0x48, 0x2d,
	0xd2, 0x4d, 0xce, 0xcf, 0xd5, 0x4f, 0xce, 0x4d, 0xd1, 0xcf, 0xcc, 0x4b, 0xcb, 0x07, 0x13, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x82, 0xd9, 0xa5, 0x49, 0xa9, 0x65, 0x99, 0x45, 0x25, 0x7a,
	0xc9, 0xb9, 0x29, 0x7a, 0x20, 0x09, 0x25, 0x01, 0x2e, 0x3e, 0xe7, 0xdc, 0x14, 0xcf, 0xbc, 0xb4,
	0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa5, 0x76, 0x26, 0x2e, 0x7e, 0xb8, 0x50, 0x71,
	0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x11, 0x97, 0x48, 0x71, 0x69, 0x41, 0x41, 0x7e, 0x51, 0x49,
	0x6a, 0x8a, 0x73, 0x6e, 0x4a, 0x58, 0x6a, 0x51, 0x71, 0x66, 0x7e, 0x5e, 0xb1, 0x04, 0xa3, 0x02,
	0xb3, 0x06, 0x67, 0x10, 0x56, 0x39, 0x21, 0x27, 0x2e, 0x19, 0xb8, 0xb8, 0x77, 0x69, 0x52, 0x6a,
	0x58, 0x66, 0x51, 0x89, 0x63, 0x80, 0x27, 0x5c, 0x2f, 0x13, 0x58, 0x2f, 0x5e, 0x35, 0x42, 0x16,
	0x5c, 0xe2, 0x70, 0x79, 0x97, 0xfc, 0xdc, 0xc4, 0xcc, 0x3c, 0xb8, 0x76, 0x66, 0xb0, 0x76, 0x5c,
	0xd2, 0x28, 0xb6, 0x43, 0xa4, 0x82, 0x4b, 0x12, 0x4b, 0x8a, 0xe1, 0xda, 0x59, 0xd0, 0x6c, 0xc7,
	0xa2, 0xc6, 0x28, 0x8a, 0x8b, 0x1d, 0x1a, 0x10, 0x42, 0xfe, 0x5c, 0x2c, 0x60, 0x5a, 0x51, 0x0f,
	0x23, 0x08, 0xf5, 0x50, 0xc3, 0x4f, 0x4a, 0x09, 0x9f, 0x12, 0x48, 0x78, 0x2a, 0x31, 0x38, 0xb1,
	0x45, 0xb1, 0x80, 0x64, 0x92, 0xd8, 0xc0, 0x31, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x4d,
	0x3a, 0x8e, 0x20, 0xc9, 0x01, 0x00, 0x00,
}
