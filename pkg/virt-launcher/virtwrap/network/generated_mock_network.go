// Code generated by MockGen. DO NOT EDIT.
// Source: network.go

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	v1 "kubevirt.io/client-go/api/v1"
	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
)

// MockpodNIC is a mock of podNIC interface
type MockpodNIC struct {
	ctrl     *gomock.Controller
	recorder *MockpodNICMockRecorder
}

// MockpodNICMockRecorder is the mock recorder for MockpodNIC
type MockpodNICMockRecorder struct {
	mock *MockpodNIC
}

// NewMockpodNIC creates a new mock instance
func NewMockpodNIC(ctrl *gomock.Controller) *MockpodNIC {
	mock := &MockpodNIC{ctrl: ctrl}
	mock.recorder = &MockpodNICMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpodNIC) EXPECT() *MockpodNICMockRecorder {
	return m.recorder
}

// PlugPhase1 mocks base method
func (m *MockpodNIC) PlugPhase1(vmi *v1.VirtualMachineInstance, iface *v1.Interface, network *v1.Network, podInterfaceName string, pid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlugPhase1", vmi, iface, network, podInterfaceName, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlugPhase1 indicates an expected call of PlugPhase1
func (mr *MockpodNICMockRecorder) PlugPhase1(vmi, iface, network, podInterfaceName, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlugPhase1", reflect.TypeOf((*MockpodNIC)(nil).PlugPhase1), vmi, iface, network, podInterfaceName, pid)
}

// PlugPhase2 mocks base method
func (m *MockpodNIC) PlugPhase2(vmi *v1.VirtualMachineInstance, iface *v1.Interface, network *v1.Network, domain *api.Domain, podInterfaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlugPhase2", vmi, iface, network, domain, podInterfaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlugPhase2 indicates an expected call of PlugPhase2
func (mr *MockpodNICMockRecorder) PlugPhase2(vmi, iface, network, domain, podInterfaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlugPhase2", reflect.TypeOf((*MockpodNIC)(nil).PlugPhase2), vmi, iface, network, domain, podInterfaceName)
}
