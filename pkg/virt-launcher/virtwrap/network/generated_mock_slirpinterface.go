// Automatically generated by MockGen. DO NOT EDIT!
// Source: slirpinterface.go

package network

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of SlirpBindMechanism interface
type MockSlirpBindMechanism struct {
	ctrl     *gomock.Controller
	recorder *_MockSlirpBindMechanismRecorder
}

// Recorder for MockSlirpBindMechanism (not exported)
type _MockSlirpBindMechanismRecorder struct {
	mock *MockSlirpBindMechanism
}

func NewMockSlirpBindMechanism(ctrl *gomock.Controller) *MockSlirpBindMechanism {
	mock := &MockSlirpBindMechanism{ctrl: ctrl}
	mock.recorder = &_MockSlirpBindMechanismRecorder{mock}
	return mock
}

func (_m *MockSlirpBindMechanism) EXPECT() *_MockSlirpBindMechanismRecorder {
	return _m.recorder
}

func (_m *MockSlirpBindMechanism) configPortForward() error {
	ret := _m.ctrl.Call(_m, "configPortForward")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlirpBindMechanismRecorder) configPortForward() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configPortForward")
}

func (_m *MockSlirpBindMechanism) configVMCIDR() error {
	ret := _m.ctrl.Call(_m, "configVMCIDR")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlirpBindMechanismRecorder) configVMCIDR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configVMCIDR")
}

func (_m *MockSlirpBindMechanism) configDNSSearchName() error {
	ret := _m.ctrl.Call(_m, "configDNSSearchName")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlirpBindMechanismRecorder) configDNSSearchName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configDNSSearchName")
}

func (_m *MockSlirpBindMechanism) CommitConfiguration() error {
	ret := _m.ctrl.Call(_m, "CommitConfiguration")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSlirpBindMechanismRecorder) CommitConfiguration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CommitConfiguration")
}
