// Automatically generated by MockGen. DO NOT EDIT!
// Source: proxyinterface.go

package network

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of ProxyBindMechanism interface
type MockProxyBindMechanism struct {
	ctrl     *gomock.Controller
	recorder *_MockProxyBindMechanismRecorder
}

// Recorder for MockProxyBindMechanism (not exported)
type _MockProxyBindMechanismRecorder struct {
	mock *MockProxyBindMechanism
}

func NewMockProxyBindMechanism(ctrl *gomock.Controller) *MockProxyBindMechanism {
	mock := &MockProxyBindMechanism{ctrl: ctrl}
	mock.recorder = &_MockProxyBindMechanismRecorder{mock}
	return mock
}

func (_m *MockProxyBindMechanism) EXPECT() *_MockProxyBindMechanismRecorder {
	return _m.recorder
}

func (_m *MockProxyBindMechanism) configPortForward() error {
	ret := _m.ctrl.Call(_m, "configPortForward")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProxyBindMechanismRecorder) configPortForward() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configPortForward")
}

func (_m *MockProxyBindMechanism) configVMCIDR() error {
	ret := _m.ctrl.Call(_m, "configVMCIDR")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProxyBindMechanismRecorder) configVMCIDR() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configVMCIDR")
}

func (_m *MockProxyBindMechanism) configDNSSearchName() error {
	ret := _m.ctrl.Call(_m, "configDNSSearchName")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProxyBindMechanismRecorder) configDNSSearchName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "configDNSSearchName")
}
