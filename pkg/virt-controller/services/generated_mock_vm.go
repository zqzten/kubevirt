// Automatically generated by MockGen. DO NOT EDIT!
// Source: vm.go

package services

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/client-go/pkg/api/v1"
	v10 "k8s.io/client-go/pkg/apis/batch/v1"
	v11 "kubevirt.io/kubevirt/pkg/api/v1"
)

// Mock of VMService interface
type MockVMService struct {
	ctrl     *gomock.Controller
	recorder *_MockVMServiceRecorder
}

// Recorder for MockVMService (not exported)
type _MockVMServiceRecorder struct {
	mock *MockVMService
}

func NewMockVMService(ctrl *gomock.Controller) *MockVMService {
	mock := &MockVMService{ctrl: ctrl}
	mock.recorder = &_MockVMServiceRecorder{mock}
	return mock
}

func (_m *MockVMService) EXPECT() *_MockVMServiceRecorder {
	return _m.recorder
}

func (_m *MockVMService) StartVMPod(_param0 *v11.VM) error {
	ret := _m.ctrl.Call(_m, "StartVMPod", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) StartVMPod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartVMPod", arg0)
}

func (_m *MockVMService) DeleteVMPod(_param0 *v11.VM) error {
	ret := _m.ctrl.Call(_m, "DeleteVMPod", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) DeleteVMPod(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVMPod", arg0)
}

func (_m *MockVMService) GetRunningVMPods(_param0 *v11.VM) (*v1.PodList, error) {
	ret := _m.ctrl.Call(_m, "GetRunningVMPods", _param0)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVMServiceRecorder) GetRunningVMPods(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRunningVMPods", arg0)
}

func (_m *MockVMService) DeleteMigration(_param0 *v11.Migration) error {
	ret := _m.ctrl.Call(_m, "DeleteMigration", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) DeleteMigration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMigration", arg0)
}

func (_m *MockVMService) GetRunningMigrationPods(_param0 *v11.Migration) (*v1.PodList, error) {
	ret := _m.ctrl.Call(_m, "GetRunningMigrationPods", _param0)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVMServiceRecorder) GetRunningMigrationPods(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRunningMigrationPods", arg0)
}

func (_m *MockVMService) SetupMigration(migration *v11.Migration, vm *v11.VM) error {
	ret := _m.ctrl.Call(_m, "SetupMigration", migration, vm)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) SetupMigration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetupMigration", arg0, arg1)
}

func (_m *MockVMService) UpdateMigration(migration *v11.Migration) error {
	ret := _m.ctrl.Call(_m, "UpdateMigration", migration)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) UpdateMigration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMigration", arg0)
}

func (_m *MockVMService) FetchVM(vmName string) (*v11.VM, error) {
	ret := _m.ctrl.Call(_m, "FetchVM", vmName)
	ret0, _ := ret[0].(*v11.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVMServiceRecorder) FetchVM(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchVM", arg0)
}

func (_m *MockVMService) StartMigration(vm *v11.VM, sourceNode *v1.Node, targetNode *v1.Node) error {
	ret := _m.ctrl.Call(_m, "StartMigration", vm, sourceNode, targetNode)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVMServiceRecorder) StartMigration(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartMigration", arg0, arg1, arg2)
}

func (_m *MockVMService) GetMigrationJob(vm *v11.VM) (*v10.Job, bool, error) {
	ret := _m.ctrl.Call(_m, "GetMigrationJob", vm)
	ret0, _ := ret[0].(*v10.Job)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockVMServiceRecorder) GetMigrationJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMigrationJob", arg0)
}
